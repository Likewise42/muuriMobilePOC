"use strict";

define(['lib.lodash', '../../gridDom'], function (_, gridDom) {
  'use strict';
  /**
   * A labeled dimension value
   * @typedef {object} Dimension
   * @property {string} name The name of this enumerated dimension
   * @property {number} val The size of this enumerated dimension
   * 
   * A height and width pair of strings
   * @typedef {object} GridDimension
   * @property {string} height The enumerated height value of a grid item
   * @property {string} width The enumerated width value of a grid item
   *
   * Information about grid item heights
   * @typedef {object} HeightMetadata
   * @property {string[]} LABELS the labels for the grid item heights
   * @property {number[]} SIZES the pixel dimensions for the heights
   * @property {Dimension[]} PAIRS the height sizes keyed by their labels
   *
   * Information about grid item widths
   * @typedef {object} WidthMetadata
   * @property {string[]} LABELS the labels for the grid item width
   *
   * Information about grid item sizes
   * @typedef {object} GridSizeMetadata
   * @property {HeightMetadata} HEIGHTS information about the grid item heights
   * @property {WidthMetadata} WIDTHS information about grid item widths
   * 
   */

  /**
   * 
   * Format a height label as a CSS class
   * @param {string} height 
   */

  var formatHeight = function formatHeight(height) {
    return "h".concat(height);
  };

  var formatWidth = function formatWidth(width) {
    return "w".concat(width);
  };
  /**
   * @type {GridSizeMetadata}
   */


  var GRID_ITEM = {
    HEIGHTS: {
      LABELS: ['XS', 'SM', 'MD', 'LG', 'XL'],
      SIZES: [70, 145, 256, 322, 508],
      PAIRS: {},
      format: formatHeight
    },
    WIDTHS: {
      LABELS: ['S', 'M', 'L'],
      format: formatWidth
    }
  };
  GRID_ITEM.HEIGHTS.PAIRS = _.zipWith(GRID_ITEM.HEIGHTS.LABELS, GRID_ITEM.HEIGHTS.SIZES, function (name, val) {
    return {
      name: name,
      val: val
    };
  });
  /**
   * @constant {RegExp} ITEM_CLASS_SIZE_PATTERN The regex pattern used to test CSS class names for a known height/width
   */

  var ITEM_CLASS_SIZE_PATTERN = new RegExp("^(?:h(".concat(GRID_ITEM.HEIGHTS.LABELS.join('|'), "))|(?:w(").concat(GRID_ITEM.WIDTHS.LABELS.join('|'), "))$"));
  /**
   * Return a new grid dimension object with default values
   * @returns {GridDimension} a dimension object representing the 
   */

  var getDefaultDimension = function getDefaultDimension() {
    return {
      height: _.head(GRID_ITEM.HEIGHTS.LABELS),
      width: _.head(GRID_ITEM.WIDTHS.LABELS)
    };
  };
  /**
   * Get the tile dimensions of an element by inspecting its css classes
   * @param {HTMLElement} element 
   * @returns {GridDimension} the specified dimensions for the grid item
   */


  var getTileDimensions = function getTileDimensions(element) {
    return _(element.classList).map(function (cl) {
      return ITEM_CLASS_SIZE_PATTERN.exec(cl);
    }).filter().reduce(function (dim, match) {
      if (match[2]) {
        dim.width = match[2];
      } else if (match[1]) {
        dim.height = match[1];
      }

      return dim;
    }, getDefaultDimension());
  };
  /**
   * Select the next grid dimension height that should follow the current height
   * @param {GridDimension} dimension The current grid dimension
   * @returns {GridDimension} the next desired grid dimension
   */


  var selectNextHeight = function selectNextHeight(dimension) {
    var heightNames = GRID_ITEM.HEIGHTS.LABELS;

    var idx = _.indexOf(heightNames, dimension.height);

    console.log('> found index', idx, heightNames);
    var nextHeight = idx >= heightNames.length - 1 ? heightNames[0] : heightNames[idx + 1];
    console.log('> next height', nextHeight, heightNames[nextHeight]);
    return _.defaults({
      height: nextHeight
    }, dimension);
  };
  /**
   * Resize the tile to the next height in the cyle of heights
   * @param {HTMLElement} element The element that should be resized
   * @returns {void}
   */


  var incrementGridItemHeight = function incrementGridItemHeight(element) {
    var currSize = getTileDimensions(element);
    var nextSize = selectNextHeight(currSize);
    return gridDom.swapClasses(element, formatHeight(currSize.height), formatHeight(nextSize.height));
  };
  /**
   * 
   * @param {HTMLElement} elem The element that should be resized
   * @param {number} desiredHeight The desired pixel height of the element
   */


  var setBestHeight = function setBestHeight(elem, desiredHeight) {
    var foundHeight = _.find(GRID_ITEM.HEIGHTS.PAIRS, function (h) {
      return h.val >= desiredHeight;
    });

    var bestHeight = foundHeight ? foundHeight : _.last(GRID_ITEM.HEIGHTS.PAIRS);
    var current = getTileDimensions(elem);
    return gridDom.swapClasses(elem, formatHeight(current.height), formatHeight(bestHeight.name));
  };

  return {
    getTileDimensions: getTileDimensions,
    incrementGridItemHeight: incrementGridItemHeight,
    setBestHeight: setBestHeight
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
