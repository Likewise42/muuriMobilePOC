"use strict";

define(['../../muuri', '../../constants', '../../env', '../../autoid', '../../lifecycleHelper', '../../elementSize', './itemDimensions'], function (Muuri, constants, env, AutoId, LifecycleHelper, ElementSizeWatcher, itemDimensions) {
  'use strict';

  var itemAutoId = new AutoId();
  var itemHooks = new LifecycleHelper();
  /**
   * Attempt to read a data attribute value, returning undefined if none is found
   * @param {*} gridItem a Muuri.GridItem
   * @param {string} attributeName the name of the data attribute
   * @param {Function} [resuscitator] an optional resuscitation function that will be executed before returning the value
   * @returns {*} The raw, resuscitated, or undefined value (if no data attribute was found by the specified name)
   */

  var getGridItemDataAttribute = function getGridItemDataAttribute(gridItem, attributeName, resuscitator) {
    if (gridItem && angular.isFunction(gridItem.getElement)) {
      var value = gridItem.getElement().dataset[attributeName];
      return angular.isFunction(resuscitator) ? resuscitator(value) : value;
    }

    return undefined;
  };

  var name = 'muuridemo.components.muuriGrid.controller';
  var inject = ['$element', '$log'];

  function MuuriGrid($element, $log) {
    var _this = this;

    this.canDrag = true;
    this.editButtonText = 'Disable Edit Mode';
    this.availableGrids = [];

    this.$onInit = function () {
      //set up the muuri grid, using the grid element as the base 
      _this.grid = new Muuri($element[0].querySelector('.dashboard__grid'), {
        items: '.item',
        //include all of the items for the grid
        dragEnabled: _this.canDrag,
        //make sure you can drag
        dragSort: function dragSort() {
          return _this.availableGrids;
        },
        dragStartPredicate: function dragStartPredicate(item, event) {
          //if dragging is disabled then prevent the drag
          if (!_this.canDrag) {
            return false;
          } //if drag is enabled then do the default


          return Muuri.ItemDrag.defaultStartPredicate(item, event);
        },
        layout: {
          fillGaps: true //tells the default layout to not leave gaps whenever possible

        }
      });

      _this.grid.on('remove', function (items) {
        items.forEach(function (gridItem) {
          var itemId = getGridItemDataAttribute(gridItem, 'gridItemId');
          itemHooks.cleanup(itemId);
        });
      });

      _this.availableGrids.push(_this.grid);
    };

    this.$onDestroy = function () {
      if (_this.grid) {
        var elements = _this.grid.getItems();

        if (elements && elements.length) {
          _this.grid.remove(elements, {
            removeElements: true,
            layout: false
          });
        }

        _this.grid.destroy();

        _this.grid = null;
      }
    };

    var createGridItemContent = function createGridItemContent(tileContent) {
      //create the content element
      var contentElement = document.createElement('DIV');

      if (tileContent.type == 'Text') {
        contentElement.appendChild(document.createTextNode(tileContent.data));
      } else {
        var msg = 'We only support text right now';
        contentElement.appendChild(document.createTextNode(msg));

        if (env.LOG_LEVEL >= constants.LOG_LEVEL.WARN) {
          $log.warn(msg);
        }
      }

      return contentElement;
    };
    /**
     * Wrap the specified content into a set of grid item DOM elements
     * @param {string} height the requested height of the element
     * @param {string} width the requested width of the element
     * @param  {...HTMLElement} elements the elements to wrap in this grid item
     */


    var wrapGridItemContent = function wrapGridItemContent(height, width) {
      //get params and store them in local variables
      var tileHeight = height || 'XS';
      var tileWidth = width || 'S';
      var gridItemId = itemAutoId.next(); //create the new tile and give it the necessary css classes

      var gridItem = document.createElement('DIV');
      gridItem.classList.add('item', 'w' + tileWidth, 'h' + tileHeight); //create the element that will wrap the content

      var gridItemInner = document.createElement('DIV');
      gridItemInner.classList.add('item-content'); //append the content to the content wrapper, then append the content wrapper to the new tile

      gridItem.appendChild(gridItemInner);
      gridItem.dataset.gridItemId = gridItemId; // add all supplied elements to the inner node

      for (var _len = arguments.length, elements = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        elements[_key - 2] = arguments[_key];
      }

      elements.forEach(function (e) {
        return gridItemInner.appendChild(e);
      });
      return {
        root: gridItem,
        inner: gridItemInner,
        id: gridItemId
      };
    };

    var buildNewGridItem = function buildNewGridItem(height, width, tileContent) {
      var heightButton = document.createElement('button');
      heightButton.innerText = 'Change height';
      var content = createGridItemContent(tileContent);
      var gridItem = wrapGridItemContent(height, width, content, heightButton);
      return {
        id: gridItem.id,
        root: gridItem.root,
        inner: gridItem.inner,
        button: heightButton
      };
    };
    /**
     * Set the order value on the provided grid item
     * @param {number} order The specified order
     * @param {HTMLElement} element The grid item element
     * @returns {void}
     */


    var setGridItemOrder = function setGridItemOrder(order, element) {
      // determine the correct value of the "order" argument because the specified value was not valid
      if (order == null || isNaN(order) || !angular.isNumber(order)) {
        var numItems = _this.grid.getItems().length;

        order = numItems - 1;
      } // set the data-order attribute value for the grid item


      element.dataset.order = '' + order;
    };

    var attachDemoResize = function attachDemoResize(gridItem) {
      // setup the demo resize button
      var resizeHandler = function resizeHandler() {
        var needsRefresh = itemDimensions.incrementGridItemHeight(gridItem.root);

        if (needsRefresh) {
          _this.grid.refreshItems([gridItem.root]);

          _this.grid.layout();
        }
      };

      gridItem.button.addEventListener('click', resizeHandler);
      itemHooks.register(gridItem.id, function () {
        gridItem.button.removeEventListener('click', resizeHandler);
      });
    };

    var setupDemoResizeDetection = function setupDemoResizeDetection(gridItem) {
      if (_this.gridType === 'display-grid') {
        var grower = document.createElement('div');
        grower.classList.add('dashboard__height-demo-subject');
        gridItem.inner.appendChild(grower);
        var watcher = new ElementSizeWatcher(grower);
        var subscription = watcher.watch(function () {
          if (gridItem.inner.scrollHeight > gridItem.inner.offsetHeight) {
            var needsRefresh = itemDimensions.setBestHeight(gridItem.root, gridItem.inner.scrollHeight);

            if (needsRefresh) {
              _this.grid.refreshItems([gridItem.root]);

              _this.grid.layout();
            }
          }
        });
        itemHooks.register(gridItem.id, function () {
          subscription.unsubscribe();
          watcher.destroy();
        });
      }
    };

    var destroyDragObjects = function destroyDragObjects() {
      _this.grid.getItems().forEach(function (item) {
        if (!item._drag) return;

        item._drag.destroy();

        item._drag = null;
      });
    };

    var createDragObjects = function createDragObjects() {
      _this.grid.getItems().forEach(function (item) {
        if (item._drag) return;
        item._drag = new Muuri.ItemDrag(item);
      });
    };
    /**
     * height: Extra Small, Small, Medium, Large, Extra Large
     * width: Small, Medium, Large
     * content: The content to be loaded. An object with type and data properties.
     */


    this.addTile = function (height, width, content, order, suspendLayout) {
      var tileContent = {};

      if (content) {
        tileContent = content;
      } else {
        tileContent = {
          type: 'Text',
          data: 'Dummy Data To Display'
        };
      }

      var gridItem = buildNewGridItem(height, width, tileContent);
      setGridItemOrder(order, gridItem.root);
      attachDemoResize(gridItem);
      setupDemoResizeDetection(gridItem); //actually add the new tile to the muuri grid, at the end, without performing layout

      _this.grid.add(gridItem.root, {
        index: -1,
        layout: false
      });

      _this.grid.sort(function (a, b) {
        var orderA = getGridItemDataAttribute(a, 'order', parseInt);
        var orderB = getGridItemDataAttribute(b, 'order', parseInt);
        return orderA - orderB;
      }); // if the layout is not suspended, perform layout after the sort


      if (!suspendLayout) {
        _this.grid.layout();
      }
    }; //toggle if you can drag items in the grid


    this.toggleEdit = function () {
      _this.canDrag = !_this.canDrag;

      if (_this.canDrag) {
        createDragObjects();
        _this.editButtonText = 'Disable Edit Mode';
      } else {
        destroyDragObjects();
        _this.editButtonText = 'Enable Edit Mode';
      }
    };
  }

  MuuriGrid.$inject = inject;
  MuuriGrid.controllerName = name;
  return MuuriGrid;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
