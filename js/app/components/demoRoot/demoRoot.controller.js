"use strict";

define(['require', '../../constants'], function (require, constants) {
  'use strict';

  var name = 'muuridemo.components.demoRoot.controller';
  var inject = ['itemLoadingService', '$timeout'];

  function DemoRootController(itemLoadingService, timeout) {
    var self = this;
    self.gridType = constants.GRID_TYPES.DISPLAY_GRID;
    var STATES = {
      mainDemo: {
        name: 'mainDemo',
        templateUrl: require.toUrl('./templates/main.html'),
        demoLink: 'Swap to Two Column Demo'
      },
      // twoColumnDemo: {
      //     name: 'twoColumnDemo',
      //     templateUrl: require.toUrl('./templates/tile-demo.html'),
      //     demoLink: 'Swap to Main Demo'
      // },
      reloading: {
        name: 'loadingDemo',
        templateUrl: require.toUrl('./templates/reloading.html'),
        demoLink: 'Reloading demo...'
      }
    };
    self.currentState = '';

    self.$onInit = function () {
      self.currentState = STATES.mainDemo;
      self.itemService = itemLoadingService;
      self.unload = true;
      self.stagger = true;
    }; // self.swapGridDemo = function swapGridDemo() {
    //     if (self.currentState.name === STATES.mainDemo.name) {
    //         self.currentState = STATES.twoColumnDemo;
    //     }
    //     else if(self.currentState.name === STATES.twoColumnDemo.name) {
    //         self.currentState = STATES.mainDemo;
    //     }
    // };


    self.togglePercentUnload = function togglePercentUnload() {
      self.unload = self.itemService.togglePercentUnload();
    };

    self.toggleStaggerLoad = function toggleStaggerLoad() {
      self.stagger = self.itemService.toggleStaggeredLoad();
    };

    self.reloadView = function () {
      if (self.currentState && self.currentState.name !== STATES.reloading.name) {
        var extantState = self.currentState;
        self.currentState = STATES.reloading;
        timeout(function () {
          self.currentState = extantState;
        }, 1000);
      }
    };
  }

  DemoRootController.$inject = inject;
  DemoRootController.controllerName = name;
  return DemoRootController;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2h0bWwvanMvYXBwL2NvbXBvbmVudHMvZGVtb1Jvb3QvZGVtb1Jvb3QuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJyZXF1aXJlIiwiY29uc3RhbnRzIiwibmFtZSIsImluamVjdCIsIkRlbW9Sb290Q29udHJvbGxlciIsIml0ZW1Mb2FkaW5nU2VydmljZSIsInRpbWVvdXQiLCJzZWxmIiwiZ3JpZFR5cGUiLCJHUklEX1RZUEVTIiwiRElTUExBWV9HUklEIiwiU1RBVEVTIiwibWFpbkRlbW8iLCJ0ZW1wbGF0ZVVybCIsInRvVXJsIiwiZGVtb0xpbmsiLCJyZWxvYWRpbmciLCJjdXJyZW50U3RhdGUiLCIkb25Jbml0IiwiaXRlbVNlcnZpY2UiLCJ1bmxvYWQiLCJzdGFnZ2VyIiwidG9nZ2xlUGVyY2VudFVubG9hZCIsInRvZ2dsZVN0YWdnZXJMb2FkIiwidG9nZ2xlU3RhZ2dlcmVkTG9hZCIsInJlbG9hZFZpZXciLCJleHRhbnRTdGF0ZSIsIiRpbmplY3QiLCJjb250cm9sbGVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsTUFBTSxDQUFDLENBQUMsU0FBRCxFQUFXLGlCQUFYLENBQUQsRUFBZ0MsVUFBU0MsT0FBVCxFQUFrQkMsU0FBbEIsRUFBNEI7QUFDOUQ7O0FBRUEsTUFBSUMsSUFBSSxHQUFHLDBDQUFYO0FBQ0EsTUFBSUMsTUFBTSxHQUFHLENBQUMsb0JBQUQsRUFBdUIsVUFBdkIsQ0FBYjs7QUFFQSxXQUFTQyxrQkFBVCxDQUE0QkMsa0JBQTVCLEVBQWdEQyxPQUFoRCxFQUF3RDtBQUNwRCxRQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBQSxJQUFBQSxJQUFJLENBQUNDLFFBQUwsR0FBZ0JQLFNBQVMsQ0FBQ1EsVUFBVixDQUFxQkMsWUFBckM7QUFFQSxRQUFNQyxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsUUFBUSxFQUFFO0FBQ05WLFFBQUFBLElBQUksRUFBRSxVQURBO0FBRU5XLFFBQUFBLFdBQVcsRUFBRWIsT0FBTyxDQUFDYyxLQUFSLENBQWMsdUJBQWQsQ0FGUDtBQUdOQyxRQUFBQSxRQUFRLEVBQUU7QUFISixPQURDO0FBTVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxNQUFBQSxTQUFTLEVBQUU7QUFDUGQsUUFBQUEsSUFBSSxFQUFFLGFBREM7QUFFUFcsUUFBQUEsV0FBVyxFQUFFYixPQUFPLENBQUNjLEtBQVIsQ0FBYyw0QkFBZCxDQUZOO0FBR1BDLFFBQUFBLFFBQVEsRUFBRTtBQUhIO0FBWEEsS0FBZjtBQWtCQVIsSUFBQUEsSUFBSSxDQUFDVSxZQUFMLEdBQW9CLEVBQXBCOztBQUVBVixJQUFBQSxJQUFJLENBQUNXLE9BQUwsR0FBZSxZQUFVO0FBQ3JCWCxNQUFBQSxJQUFJLENBQUNVLFlBQUwsR0FBb0JOLE1BQU0sQ0FBQ0MsUUFBM0I7QUFDQUwsTUFBQUEsSUFBSSxDQUFDWSxXQUFMLEdBQW1CZCxrQkFBbkI7QUFDQUUsTUFBQUEsSUFBSSxDQUFDYSxNQUFMLEdBQWMsSUFBZDtBQUNBYixNQUFBQSxJQUFJLENBQUNjLE9BQUwsR0FBZSxJQUFmO0FBQ0gsS0FMRCxDQXhCb0QsQ0ErQnBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBZCxJQUFBQSxJQUFJLENBQUNlLG1CQUFMLEdBQTJCLFNBQVNBLG1CQUFULEdBQStCO0FBQ3REZixNQUFBQSxJQUFJLENBQUNhLE1BQUwsR0FBY2IsSUFBSSxDQUFDWSxXQUFMLENBQWlCRyxtQkFBakIsRUFBZDtBQUNILEtBRkQ7O0FBR0FmLElBQUFBLElBQUksQ0FBQ2dCLGlCQUFMLEdBQXlCLFNBQVNBLGlCQUFULEdBQTZCO0FBQ2xEaEIsTUFBQUEsSUFBSSxDQUFDYyxPQUFMLEdBQWVkLElBQUksQ0FBQ1ksV0FBTCxDQUFpQkssbUJBQWpCLEVBQWY7QUFDSCxLQUZEOztBQUdBakIsSUFBQUEsSUFBSSxDQUFDa0IsVUFBTCxHQUFrQixZQUFNO0FBQ3BCLFVBQUdsQixJQUFJLENBQUNVLFlBQUwsSUFBcUJWLElBQUksQ0FBQ1UsWUFBTCxDQUFrQmYsSUFBbEIsS0FBMkJTLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQmQsSUFBcEUsRUFBeUU7QUFDckUsWUFBTXdCLFdBQVcsR0FBR25CLElBQUksQ0FBQ1UsWUFBekI7QUFDQVYsUUFBQUEsSUFBSSxDQUFDVSxZQUFMLEdBQW9CTixNQUFNLENBQUNLLFNBQTNCO0FBQ0FWLFFBQUFBLE9BQU8sQ0FBQyxZQUFNO0FBQ1ZDLFVBQUFBLElBQUksQ0FBQ1UsWUFBTCxHQUFvQlMsV0FBcEI7QUFDSCxTQUZNLEVBRUosSUFGSSxDQUFQO0FBR0g7QUFDSixLQVJEO0FBU0g7O0FBRUR0QixFQUFBQSxrQkFBa0IsQ0FBQ3VCLE9BQW5CLEdBQTZCeEIsTUFBN0I7QUFDQUMsRUFBQUEsa0JBQWtCLENBQUN3QixjQUFuQixHQUFvQzFCLElBQXBDO0FBQ0EsU0FBT0Usa0JBQVA7QUFDSCxDQWxFSyxDQUFOIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsncmVxdWlyZScsJy4uLy4uL2NvbnN0YW50cyddLCBmdW5jdGlvbihyZXF1aXJlLCBjb25zdGFudHMpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBuYW1lID0gJ211dXJpZGVtby5jb21wb25lbnRzLmRlbW9Sb290LmNvbnRyb2xsZXInO1xyXG4gICAgdmFyIGluamVjdCA9IFsnaXRlbUxvYWRpbmdTZXJ2aWNlJywgJyR0aW1lb3V0J107XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIERlbW9Sb290Q29udHJvbGxlcihpdGVtTG9hZGluZ1NlcnZpY2UsIHRpbWVvdXQpe1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmdyaWRUeXBlID0gY29uc3RhbnRzLkdSSURfVFlQRVMuRElTUExBWV9HUklEO1xyXG5cclxuICAgICAgICBjb25zdCBTVEFURVMgPSB7XHJcbiAgICAgICAgICAgIG1haW5EZW1vOiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWFpbkRlbW8nLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IHJlcXVpcmUudG9VcmwoJy4vdGVtcGxhdGVzL21haW4uaHRtbCcpLFxyXG4gICAgICAgICAgICAgICAgZGVtb0xpbms6ICdTd2FwIHRvIFR3byBDb2x1bW4gRGVtbydcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gdHdvQ29sdW1uRGVtbzoge1xyXG4gICAgICAgICAgICAvLyAgICAgbmFtZTogJ3R3b0NvbHVtbkRlbW8nLFxyXG4gICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6IHJlcXVpcmUudG9VcmwoJy4vdGVtcGxhdGVzL3RpbGUtZGVtby5odG1sJyksXHJcbiAgICAgICAgICAgIC8vICAgICBkZW1vTGluazogJ1N3YXAgdG8gTWFpbiBEZW1vJ1xyXG4gICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICByZWxvYWRpbmc6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdsb2FkaW5nRGVtbycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogcmVxdWlyZS50b1VybCgnLi90ZW1wbGF0ZXMvcmVsb2FkaW5nLmh0bWwnKSxcclxuICAgICAgICAgICAgICAgIGRlbW9MaW5rOiAnUmVsb2FkaW5nIGRlbW8uLi4nXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9ICcnO1xyXG5cclxuICAgICAgICBzZWxmLiRvbkluaXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IFNUQVRFUy5tYWluRGVtbztcclxuICAgICAgICAgICAgc2VsZi5pdGVtU2VydmljZSA9IGl0ZW1Mb2FkaW5nU2VydmljZTtcclxuICAgICAgICAgICAgc2VsZi51bmxvYWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLnN0YWdnZXIgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHNlbGYuc3dhcEdyaWREZW1vID0gZnVuY3Rpb24gc3dhcEdyaWREZW1vKCkge1xyXG4gICAgICAgIC8vICAgICBpZiAoc2VsZi5jdXJyZW50U3RhdGUubmFtZSA9PT0gU1RBVEVTLm1haW5EZW1vLm5hbWUpIHtcclxuICAgICAgICAvLyAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gU1RBVEVTLnR3b0NvbHVtbkRlbW87XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgICAgZWxzZSBpZihzZWxmLmN1cnJlbnRTdGF0ZS5uYW1lID09PSBTVEFURVMudHdvQ29sdW1uRGVtby5uYW1lKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IFNUQVRFUy5tYWluRGVtbztcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH07XHJcblxyXG4gICAgICAgIHNlbGYudG9nZ2xlUGVyY2VudFVubG9hZCA9IGZ1bmN0aW9uIHRvZ2dsZVBlcmNlbnRVbmxvYWQoKSB7XHJcbiAgICAgICAgICAgIHNlbGYudW5sb2FkID0gc2VsZi5pdGVtU2VydmljZS50b2dnbGVQZXJjZW50VW5sb2FkKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZWxmLnRvZ2dsZVN0YWdnZXJMb2FkID0gZnVuY3Rpb24gdG9nZ2xlU3RhZ2dlckxvYWQoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc3RhZ2dlciA9IHNlbGYuaXRlbVNlcnZpY2UudG9nZ2xlU3RhZ2dlcmVkTG9hZCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VsZi5yZWxvYWRWaWV3ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZihzZWxmLmN1cnJlbnRTdGF0ZSAmJiBzZWxmLmN1cnJlbnRTdGF0ZS5uYW1lICE9PSBTVEFURVMucmVsb2FkaW5nLm5hbWUpe1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXh0YW50U3RhdGUgPSBzZWxmLmN1cnJlbnRTdGF0ZTtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gU1RBVEVTLnJlbG9hZGluZztcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFN0YXRlID0gZXh0YW50U3RhdGU7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgRGVtb1Jvb3RDb250cm9sbGVyLiRpbmplY3QgPSBpbmplY3Q7XHJcbiAgICBEZW1vUm9vdENvbnRyb2xsZXIuY29udHJvbGxlck5hbWUgPSBuYW1lO1xyXG4gICAgcmV0dXJuIERlbW9Sb290Q29udHJvbGxlcjtcclxufSk7Il19
