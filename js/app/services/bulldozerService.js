"use strict";

define(['lib/rxjs'], function (Rx) {
  'use strict';

  var name = 'bulldozerService';
  var inject = [];

  function BulldozerService() {
    var self = this;
    self.display = false;
    var displaySubject = new Rx.BehaviorSubject(self.display); //set by the instance of the bulldozer

    var instance = null;

    self.getDisplay = function () {
      return self.display;
    };

    self.setDisplay = function (newTitle) {
      document.title = newTitle;
      displaySubject.next(newTitle);
    };

    self.subscribe = function (onNext) {
      var subscription = {};

      if (angular.isFunction(onNext)) {
        subscription.next = onNext;
      }

      return displaySubject.subscribe(subscription);
    }; //simple method to toggle whether or not the bulldozer is shown


    self.toggleDisplay = function () {
      self.setDisplay(!self.display);
    };
  }

  BulldozerService.$inject = inject;
  BulldozerService.serviceName = name;
  return BulldozerService;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2h0bWwvanMvYXBwL3NlcnZpY2VzL2J1bGxkb3plclNlcnZpY2UuanMiXSwibmFtZXMiOlsiZGVmaW5lIiwiUngiLCJuYW1lIiwiaW5qZWN0IiwiQnVsbGRvemVyU2VydmljZSIsInNlbGYiLCJkaXNwbGF5IiwiZGlzcGxheVN1YmplY3QiLCJCZWhhdmlvclN1YmplY3QiLCJpbnN0YW5jZSIsImdldERpc3BsYXkiLCJzZXREaXNwbGF5IiwibmV3VGl0bGUiLCJkb2N1bWVudCIsInRpdGxlIiwibmV4dCIsInN1YnNjcmliZSIsIm9uTmV4dCIsInN1YnNjcmlwdGlvbiIsImFuZ3VsYXIiLCJpc0Z1bmN0aW9uIiwidG9nZ2xlRGlzcGxheSIsIiRpbmplY3QiLCJzZXJ2aWNlTmFtZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsTUFBTSxDQUFDLENBQUMsVUFBRCxDQUFELEVBQWUsVUFBVUMsRUFBVixFQUFjO0FBQy9COztBQUVBLE1BQUlDLElBQUksR0FBRyxrQkFBWDtBQUNBLE1BQUlDLE1BQU0sR0FBRyxFQUFiOztBQUNBLFdBQVNDLGdCQUFULEdBQTRCO0FBQ3hCLFFBQUlDLElBQUksR0FBRyxJQUFYO0FBQ0FBLElBQUFBLElBQUksQ0FBQ0MsT0FBTCxHQUFlLEtBQWY7QUFDQSxRQUFJQyxjQUFjLEdBQUcsSUFBSU4sRUFBRSxDQUFDTyxlQUFQLENBQXVCSCxJQUFJLENBQUNDLE9BQTVCLENBQXJCLENBSHdCLENBS3hCOztBQUNBLFFBQUlHLFFBQVEsR0FBRyxJQUFmOztBQUVBSixJQUFBQSxJQUFJLENBQUNLLFVBQUwsR0FBa0IsWUFBVTtBQUN4QixhQUFPTCxJQUFJLENBQUNDLE9BQVo7QUFDSCxLQUZEOztBQUlBRCxJQUFBQSxJQUFJLENBQUNNLFVBQUwsR0FBa0IsVUFBU0MsUUFBVCxFQUFrQjtBQUNoQ0MsTUFBQUEsUUFBUSxDQUFDQyxLQUFULEdBQWlCRixRQUFqQjtBQUNBTCxNQUFBQSxjQUFjLENBQUNRLElBQWYsQ0FBb0JILFFBQXBCO0FBQ0gsS0FIRDs7QUFLQVAsSUFBQUEsSUFBSSxDQUFDVyxTQUFMLEdBQWlCLFVBQVNDLE1BQVQsRUFBaUI7QUFDOUIsVUFBSUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLFVBQUdDLE9BQU8sQ0FBQ0MsVUFBUixDQUFtQkgsTUFBbkIsQ0FBSCxFQUE4QjtBQUMxQkMsUUFBQUEsWUFBWSxDQUFDSCxJQUFiLEdBQW9CRSxNQUFwQjtBQUNIOztBQUNELGFBQU9WLGNBQWMsQ0FBQ1MsU0FBZixDQUF5QkUsWUFBekIsQ0FBUDtBQUNILEtBTkQsQ0FqQndCLENBeUJ4Qjs7O0FBQ0FiLElBQUFBLElBQUksQ0FBQ2dCLGFBQUwsR0FBcUIsWUFBWTtBQUM3QmhCLE1BQUFBLElBQUksQ0FBQ00sVUFBTCxDQUFnQixDQUFDTixJQUFJLENBQUNDLE9BQXRCO0FBQ0gsS0FGRDtBQUdIOztBQUVERixFQUFBQSxnQkFBZ0IsQ0FBQ2tCLE9BQWpCLEdBQTJCbkIsTUFBM0I7QUFDQUMsRUFBQUEsZ0JBQWdCLENBQUNtQixXQUFqQixHQUErQnJCLElBQS9CO0FBQ0EsU0FBT0UsZ0JBQVA7QUFDSCxDQXZDSyxDQUFOIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnbGliL3J4anMnXSwgZnVuY3Rpb24gKFJ4KSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIG5hbWUgPSAnYnVsbGRvemVyU2VydmljZSc7XHJcbiAgICB2YXIgaW5qZWN0ID0gW107XHJcbiAgICBmdW5jdGlvbiBCdWxsZG96ZXJTZXJ2aWNlKCkge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmRpc3BsYXkgPSBmYWxzZTtcclxuICAgICAgICB2YXIgZGlzcGxheVN1YmplY3QgPSBuZXcgUnguQmVoYXZpb3JTdWJqZWN0KHNlbGYuZGlzcGxheSk7XHJcblxyXG4gICAgICAgIC8vc2V0IGJ5IHRoZSBpbnN0YW5jZSBvZiB0aGUgYnVsbGRvemVyXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbnVsbDtcclxuXHJcbiAgICAgICAgc2VsZi5nZXREaXNwbGF5ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGlzcGxheTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZWxmLnNldERpc3BsYXkgPSBmdW5jdGlvbihuZXdUaXRsZSl7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gbmV3VGl0bGU7XHJcbiAgICAgICAgICAgIGRpc3BsYXlTdWJqZWN0Lm5leHQobmV3VGl0bGUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGYuc3Vic2NyaWJlID0gZnVuY3Rpb24ob25OZXh0KSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB7fTtcclxuICAgICAgICAgICAgaWYoYW5ndWxhci5pc0Z1bmN0aW9uKG9uTmV4dCkpe1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLm5leHQgPSBvbk5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXlTdWJqZWN0LnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vc2ltcGxlIG1ldGhvZCB0byB0b2dnbGUgd2hldGhlciBvciBub3QgdGhlIGJ1bGxkb3plciBpcyBzaG93blxyXG4gICAgICAgIHNlbGYudG9nZ2xlRGlzcGxheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5zZXREaXNwbGF5KCFzZWxmLmRpc3BsYXkpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgQnVsbGRvemVyU2VydmljZS4kaW5qZWN0ID0gaW5qZWN0O1xyXG4gICAgQnVsbGRvemVyU2VydmljZS5zZXJ2aWNlTmFtZSA9IG5hbWU7XHJcbiAgICByZXR1cm4gQnVsbGRvemVyU2VydmljZTtcclxufSk7Il19
