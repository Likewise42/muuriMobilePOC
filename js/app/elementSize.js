"use strict";

define(['lib/rxjs', 'lib/lodash', './autoid', './gridDom'], function (Rx, _, AutoId, gridDom) {
  'use strict';

  var WATCHER_ID = new AutoId();
  var changes = new Rx.Subject();
  var registeredElements = new Map();
  var isPolling = false;

  var observerLoop = function observerLoop() {
    if (registeredElements.size > 0) {
      isPolling = true;
      Array.from(registeredElements.keys()).forEach(function (element) {
        var data = registeredElements.get(element);
        var current = gridDom.getDimensions(element);

        if (current.height !== data.size.height || current.width !== data.size.width) {
          data.size.height = current.height;
          data.size.width = current.width; // dimensions changed

          changes.next({
            element: element,
            size: current
          });
        }
      });
      setTimeout(function () {
        return requestAnimationFrame(observerLoop);
      }, 75);
    } else {
      isPolling = false;
    }
  };
  /**
   * Initialize the height observation loop if it isn't already running
   */


  var startObserverLoop = function startObserverLoop() {
    if (!isPolling) {
      observerLoop();
    }
  };
  /**
   * Register a ElementSize watcher against a specified element
   * @param {string} id The id of the ElementSize watcher
   * @param {HTMLElement} element The html element to be registered
   */


  var register = function register(id, element) {
    if (!registeredElements.has(element)) {
      registeredElements.set(element, {
        size: gridDom.getDimensions(null),
        watchers: [id]
      });
    } else {
      registeredElements.get(element).watchers.push(id);
    }

    startObserverLoop();
  };
  /**
   * Remove a watcher registration for the given element
   * @param {string} id The id of the ElementSize watcher
   * @param {HTMLElement} element The html element that was being observed
   */


  var deregister = function deregister(id, element) {
    if (registeredElements.has(element)) {
      var data = registeredElements.get(element);

      _.pull(data.watchers, id); // Cleanup the registeredElements collection if there are no more watchers on this element


      if (data.watchers.length < 1) {
        registeredElements.delete(element);
      }
    }
  };
  /**
   * Create a new ElementSize observer, which will poll the specified element to provide
   * element size updates to any subscribing code
   * @class muuridemo.ElementSize
   * @param {HTMLElement} watchedElement The element being watched
   */


  function ElementSizeWatcher(watchedElement) {
    var id = WATCHER_ID.next();
    var elementChanges = new Rx.Subject();
    var elementChangesSubscription = changes.pipe(Rx.operators.filter(function (_ref) {
      var element = _ref.element;
      return element === watchedElement;
    }), Rx.operators.debounceTime(150)).subscribe(elementChanges);
    /**
     * Subscribe a listener to this element's size changes
     * @method
     * @instance
     * @memberof muuridemo.ElementSize
     * @param {Function} listener The listener function to subscribe
     * @returns a Rxjs subscription object
     */

    this.watch = function (listener) {
      // sets only store unique items, always attempt to add
      var sub = elementChanges.subscribe(listener);
      register(id, watchedElement);
      return sub;
    };
    /**
     * Destroy this muuridemo.ElementSize watcher and shutdown its pipelines
     * @method
     * @instance
     * @memberof muuridemo.ElementSize
     */


    this.destroy = function () {
      deregister(id, watchedElement);
      elementChangesSubscription.unsubscribe();
      elementChanges.complete();
    };
  }

  return ElementSizeWatcher;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
